import { ILabShell, JupyterFrontEndPlugin } from '@jupyterlab/application';
import { IDocumentWidget } from '@jupyterlab/docregistry';
import { Signal } from '@lumino/signaling';
import type { IRetroShell } from '@retrolab/application';
import { WidgetAdapter } from './adapters/adapter';
import { IAdapterRegistration, IAdapterTypeOptions, ILSPAdapterManager } from './tokens';
import { LSPExtension } from './index';
export declare class WidgetAdapterManager implements ILSPAdapterManager {
    protected shell: ILabShell | IRetroShell;
    adapterTypeAdded: Signal<WidgetAdapterManager, IAdapterTypeOptions<IDocumentWidget>>;
    adapterChanged: Signal<WidgetAdapterManager, WidgetAdapter<IDocumentWidget>>;
    adapterDisposed: Signal<WidgetAdapterManager, WidgetAdapter<IDocumentWidget>>;
    currentAdapter: WidgetAdapter<IDocumentWidget>;
    protected adapters: Map<string, WidgetAdapter<IDocumentWidget>>;
    protected adapterTypes: IAdapterTypeOptions<IDocumentWidget>[];
    get types(): IAdapterTypeOptions<IDocumentWidget>[];
    constructor(shell: ILabShell | IRetroShell);
    registerAdapterType(options: IAdapterTypeOptions<IDocumentWidget>): void;
    private connect;
    registerExtension(extension: LSPExtension): void;
    protected connectWidget(extension: LSPExtension, widget: IDocumentWidget, type: IAdapterTypeOptions<IDocumentWidget>): void;
    protected refreshAdapterFromCurrentWidget(): void;
    protected registerAdapter(options: IAdapterRegistration): void;
    isAnyActive(): boolean;
}
export declare const WIDGET_ADAPTER_MANAGER: JupyterFrontEndPlugin<ILSPAdapterManager>;
