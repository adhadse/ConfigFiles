import { Signal } from '@lumino/signaling';
import * as SCHEMA from './_schema';
import { ILanguageServerManager, TLanguageServerConfigurations, TLanguageServerId, TSessionMap, TSpecsMap } from './tokens';
export declare class LanguageServerManager implements ILanguageServerManager {
    protected _sessionsChanged: Signal<ILanguageServerManager, void>;
    protected _sessions: TSessionMap;
    protected _specs: TSpecsMap;
    protected _version: number;
    private _settings;
    private _baseUrl;
    private _statusCode;
    private _retries;
    private _retriesInterval;
    private _configuration;
    private _warningsEmitted;
    private console;
    constructor(options: ILanguageServerManager.IOptions);
    get specs(): TSpecsMap;
    get statusUrl(): string;
    get sessionsChanged(): Signal<ILanguageServerManager, void>;
    get sessions(): TSessionMap;
    setConfiguration(configuration: TLanguageServerConfigurations): void;
    protected warnOnce(arg: string): void;
    protected _comparePriorities(a: TLanguageServerId, b: TLanguageServerId): number;
    protected isMatchingSpec(options: ILanguageServerManager.IGetServerIdOptions, spec: SCHEMA.LanguageServerSpec): boolean;
    getMatchingServers(options: ILanguageServerManager.IGetServerIdOptions): TLanguageServerId[];
    getMatchingSpecs(options: ILanguageServerManager.IGetServerIdOptions): TSpecsMap;
    get statusCode(): number;
    fetchSessions(): Promise<void>;
}
