{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/lsp-ws-connection/lib/server-capability-registration.js","webpack://@jupyterlab/application-top/./node_modules/@krassowski/jupyterlab-lsp/lib/connection.js"],"names":["registerServerCapability","serverCapabilities","registration","serverCapabilitiesCopy","JSON","parse","stringify","method","registerOptions","providerName","substring","console","warn","unregisterServerCapability","unregistration","Method","ServerNotification","ClientNotification","ServerRequest","ClientRequest","ClientRequestHandler","constructor","connection","emitter","this","request","params","log","MessageKind","client_requested","message","sendRequest","then","result","result_for_client","ServerRequestHandler","onRequest","handle","bind","_handler","server_requested","Promise","undefined","response_for_server","setHandler","handler","clearHandler","Provider","TEXT_DOCUMENT_SYNC","COMPLETION","HOVER","SIGNATURE_HELP","DECLARATION","DEFINITION","TYPE_DEFINITION","IMPLEMENTATION","REFERENCES","DOCUMENT_HIGHLIGHT","DOCUMENT_SYMBOL","CODE_ACTION","CODE_LENS","DOCUMENT_LINK","COLOR","DOCUMENT_FORMATTING","DOCUMENT_RANGE_FORMATTING","DOCUMENT_ON_TYPE_FORMATTING","RENAME","FOLDING_RANGE","EXECUTE_COMMAND","SELECTION_RANGE","WORKSPACE_SYMBOL","WORKSPACE","createMethodMap","methods","handlerFactory","Object","values","LSPConnection","LspWsConnection","options","super","closing_manually","_options","logAllCommunication","serverIdentifier","scope","documentsToOpen","clientNotifications","constructNotificationHandlers","serverNotifications","kind","Signal","constructClientRequestHandler","constructServerRequestHandler","initializeParams","assign","capabilities","initializationOptions","processId","workspaceFolders","sendOpenWhenReady","documentInfo","isReady","sendOpen","push","onServerInitialized","afterInitialized","length","pop","signal","onNotification","server_notified_client","emit","connect","client_notified_server","sendNotification","clientRequests","serverRequests","async","registrations","forEach","capabilityRegistration","updatedCapabilities","error","err","unregisterations","capabilityUnregistration","items","map","item","sendSelectiveChange","changeEvent","_sendChange","sendFullTextChange","text","isRenameSupported","renameProvider","provides","provider","location","newName","textDocument","uri","position","line","character","ch","edit","socket","isConnected","onClose","catch","close","e","changeEvents","openedUris","get","textDocumentChange","version","contentChanges","completionItem","isCompletionResolveProvider","_a","_b","completionProvider","resolveProvider"],"mappings":"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","file":"jupyter-lsp-connection.e2b555e6b478867fd488.js?v=e2b555e6b478867fd488","sourcesContent":["function registerServerCapability(serverCapabilities, registration) {\n    var serverCapabilitiesCopy = JSON.parse(JSON.stringify(serverCapabilities));\n    var method = registration.method, registerOptions = registration.registerOptions;\n    var providerName = method.substring(13) + 'Provider';\n    if (providerName) {\n        if (!registerOptions) {\n            serverCapabilitiesCopy[providerName] = true;\n        }\n        else {\n            serverCapabilitiesCopy[providerName] = JSON.parse(JSON.stringify(registerOptions));\n        }\n    }\n    else {\n        console.warn('Could not register server capability.', registration);\n        return null;\n    }\n    return serverCapabilitiesCopy;\n}\nfunction unregisterServerCapability(serverCapabilities, unregistration) {\n    var serverCapabilitiesCopy = JSON.parse(JSON.stringify(serverCapabilities));\n    var method = unregistration.method;\n    var providerName = method.substring(13) + 'Provider';\n    delete serverCapabilitiesCopy[providerName];\n    return serverCapabilitiesCopy;\n}\nexport { registerServerCapability, unregisterServerCapability };\n//# sourceMappingURL=server-capability-registration.js.map","// Disclaimer/acknowledgement: Fragments are based on LspWsConnection, which is copyright of wylieconlon and contributors and ISC licenced.\n// ISC licence is, quote, \"functionally equivalent to the simplified BSD and MIT licenses,\n// but without language deemed unnecessary following the Berne Convention.\" (Wikipedia).\n// Introduced modifications are BSD licenced, copyright JupyterLab development team.\nimport { Signal } from '@lumino/signaling';\nimport { LspWsConnection } from 'lsp-ws-connection';\nimport { registerServerCapability, unregisterServerCapability } from 'lsp-ws-connection/lib/server-capability-registration';\nimport { until_ready } from './utils';\n/**\n * Method strings are reproduced here because a non-typing import of\n * `vscode-languageserver-protocol` is ridiculously expensive.\n */\nexport var Method;\n(function (Method) {\n    /** Server notifications */\n    let ServerNotification;\n    (function (ServerNotification) {\n        ServerNotification[\"PUBLISH_DIAGNOSTICS\"] = \"textDocument/publishDiagnostics\";\n        ServerNotification[\"SHOW_MESSAGE\"] = \"window/showMessage\";\n        ServerNotification[\"LOG_TRACE\"] = \"$/logTrace\";\n        ServerNotification[\"LOG_MESSAGE\"] = \"window/logMessage\";\n    })(ServerNotification = Method.ServerNotification || (Method.ServerNotification = {}));\n    /** Client notifications */\n    let ClientNotification;\n    (function (ClientNotification) {\n        ClientNotification[\"DID_CHANGE\"] = \"textDocument/didChange\";\n        ClientNotification[\"DID_CHANGE_CONFIGURATION\"] = \"workspace/didChangeConfiguration\";\n        ClientNotification[\"DID_OPEN\"] = \"textDocument/didOpen\";\n        ClientNotification[\"DID_SAVE\"] = \"textDocument/didSave\";\n        ClientNotification[\"INITIALIZED\"] = \"initialized\";\n        ClientNotification[\"SET_TRACE\"] = \"$/setTrace\";\n    })(ClientNotification = Method.ClientNotification || (Method.ClientNotification = {}));\n    /** Server requests */\n    let ServerRequest;\n    (function (ServerRequest) {\n        ServerRequest[\"REGISTER_CAPABILITY\"] = \"client/registerCapability\";\n        ServerRequest[\"SHOW_MESSAGE_REQUEST\"] = \"window/showMessageRequest\";\n        ServerRequest[\"UNREGISTER_CAPABILITY\"] = \"client/unregisterCapability\";\n        ServerRequest[\"WORKSPACE_CONFIGURATION\"] = \"workspace/configuration\";\n    })(ServerRequest = Method.ServerRequest || (Method.ServerRequest = {}));\n    /** Client requests */\n    let ClientRequest;\n    (function (ClientRequest) {\n        ClientRequest[\"COMPLETION\"] = \"textDocument/completion\";\n        ClientRequest[\"COMPLETION_ITEM_RESOLVE\"] = \"completionItem/resolve\";\n        ClientRequest[\"DEFINITION\"] = \"textDocument/definition\";\n        ClientRequest[\"DOCUMENT_HIGHLIGHT\"] = \"textDocument/documentHighlight\";\n        ClientRequest[\"DOCUMENT_SYMBOL\"] = \"textDocument/documentSymbol\";\n        ClientRequest[\"HOVER\"] = \"textDocument/hover\";\n        ClientRequest[\"IMPLEMENTATION\"] = \"textDocument/implementation\";\n        ClientRequest[\"INITIALIZE\"] = \"initialize\";\n        ClientRequest[\"REFERENCES\"] = \"textDocument/references\";\n        ClientRequest[\"RENAME\"] = \"textDocument/rename\";\n        ClientRequest[\"SIGNATURE_HELP\"] = \"textDocument/signatureHelp\";\n        ClientRequest[\"TYPE_DEFINITION\"] = \"textDocument/typeDefinition\";\n    })(ClientRequest = Method.ClientRequest || (Method.ClientRequest = {}));\n})(Method || (Method = {}));\nclass ClientRequestHandler {\n    constructor(connection, method, emitter) {\n        this.connection = connection;\n        this.method = method;\n        this.emitter = emitter;\n    }\n    request(params) {\n        // TODO check if is ready?\n        this.emitter.log(MessageKind.client_requested, {\n            method: this.method,\n            message: params\n        });\n        return this.connection\n            .sendRequest(this.method, params)\n            .then((result) => {\n            this.emitter.log(MessageKind.result_for_client, {\n                method: this.method,\n                message: params\n            });\n            return result;\n        });\n    }\n}\nclass ServerRequestHandler {\n    constructor(connection, method, emitter) {\n        this.connection = connection;\n        this.method = method;\n        this.emitter = emitter;\n        // on request accepts \"thenable\"\n        this.connection.onRequest(method, this.handle.bind(this));\n        this._handler = null;\n    }\n    handle(request) {\n        this.emitter.log(MessageKind.server_requested, {\n            method: this.method,\n            message: request\n        });\n        if (!this._handler) {\n            return new Promise(() => undefined);\n        }\n        return this._handler(request, this.emitter).then(result => {\n            this.emitter.log(MessageKind.response_for_server, {\n                method: this.method,\n                message: result\n            });\n            return result;\n        });\n    }\n    setHandler(handler) {\n        this._handler = handler;\n    }\n    clearHandler() {\n        this._handler = null;\n    }\n}\nexport const Provider = {\n    TEXT_DOCUMENT_SYNC: 'textDocumentSync',\n    COMPLETION: 'completionProvider',\n    HOVER: 'hoverProvider',\n    SIGNATURE_HELP: 'signatureHelpProvider',\n    DECLARATION: 'declarationProvider',\n    DEFINITION: 'definitionProvider',\n    TYPE_DEFINITION: 'typeDefinitionProvider',\n    IMPLEMENTATION: 'implementationProvider',\n    REFERENCES: 'referencesProvider',\n    DOCUMENT_HIGHLIGHT: 'documentHighlightProvider',\n    DOCUMENT_SYMBOL: 'documentSymbolProvider',\n    CODE_ACTION: 'codeActionProvider',\n    CODE_LENS: 'codeLensProvider',\n    DOCUMENT_LINK: 'documentLinkProvider',\n    COLOR: 'colorProvider',\n    DOCUMENT_FORMATTING: 'documentFormattingProvider',\n    DOCUMENT_RANGE_FORMATTING: 'documentRangeFormattingProvider',\n    DOCUMENT_ON_TYPE_FORMATTING: 'documentOnTypeFormattingProvider',\n    RENAME: 'renameProvider',\n    FOLDING_RANGE: 'foldingRangeProvider',\n    EXECUTE_COMMAND: 'executeCommandProvider',\n    SELECTION_RANGE: 'selectionRangeProvider',\n    WORKSPACE_SYMBOL: 'workspaceSymbolProvider',\n    WORKSPACE: 'workspace'\n};\nfunction createMethodMap(methods, handlerFactory) {\n    const result = {};\n    for (let method of Object.values(methods)) {\n        result[method] = handlerFactory(method);\n    }\n    return result;\n}\nvar MessageKind;\n(function (MessageKind) {\n    MessageKind[MessageKind[\"client_notified_server\"] = 0] = \"client_notified_server\";\n    MessageKind[MessageKind[\"server_notified_client\"] = 1] = \"server_notified_client\";\n    MessageKind[MessageKind[\"server_requested\"] = 2] = \"server_requested\";\n    MessageKind[MessageKind[\"client_requested\"] = 3] = \"client_requested\";\n    MessageKind[MessageKind[\"result_for_client\"] = 4] = \"result_for_client\";\n    MessageKind[MessageKind[\"response_for_server\"] = 5] = \"response_for_server\";\n})(MessageKind || (MessageKind = {}));\nexport class LSPConnection extends LspWsConnection {\n    constructor(options) {\n        super(options);\n        this.closing_manually = false;\n        this._options = options;\n        this.logAllCommunication = false;\n        this.serverIdentifier = options.serverIdentifier;\n        this.console = options.console.scope(this.serverIdentifier + ' connection');\n        this.documentsToOpen = [];\n        this.clientNotifications =\n            this.constructNotificationHandlers(Method.ClientNotification);\n        this.serverNotifications =\n            this.constructNotificationHandlers(Method.ServerNotification);\n    }\n    log(kind, message) {\n        if (this.logAllCommunication) {\n            this.console.log(kind, message);\n        }\n    }\n    constructNotificationHandlers(methods) {\n        return createMethodMap(methods, () => new Signal(this));\n    }\n    constructClientRequestHandler(methods) {\n        return createMethodMap(methods, method => new ClientRequestHandler(this.connection, method, this));\n    }\n    constructServerRequestHandler(methods) {\n        return createMethodMap(methods, method => new ServerRequestHandler(this.connection, method, this));\n    }\n    /**\n     * Initialization parameters to be sent to the language server.\n     * Subclasses can overload this when adding more features.\n     */\n    initializeParams() {\n        return Object.assign(Object.assign({}, super.initializeParams()), { \n            // TODO: remove as `lsp.ClientCapabilities` after upgrading to 3.17\n            // which should finally include a fix for moniker issue:\n            // https://github.com/microsoft/vscode-languageserver-node/pull/720\n            capabilities: this._options.capabilities, initializationOptions: null, processId: null, workspaceFolders: null });\n    }\n    sendOpenWhenReady(documentInfo) {\n        if (this.isReady) {\n            this.sendOpen(documentInfo);\n        }\n        else {\n            this.documentsToOpen.push(documentInfo);\n        }\n    }\n    onServerInitialized(params) {\n        this.afterInitialized();\n        super.onServerInitialized(params);\n        while (this.documentsToOpen.length) {\n            this.sendOpen(this.documentsToOpen.pop());\n        }\n    }\n    afterInitialized() {\n        for (const method of Object.values(Method.ServerNotification)) {\n            const signal = this.serverNotifications[method];\n            this.connection.onNotification(method, params => {\n                this.log(MessageKind.server_notified_client, {\n                    method,\n                    message: params\n                });\n                signal.emit(params);\n            });\n        }\n        for (const method of Object.values(Method.ClientNotification)) {\n            const signal = this.clientNotifications[method];\n            signal.connect((emitter, params) => {\n                this.log(MessageKind.client_notified_server, {\n                    method,\n                    message: params\n                });\n                this.connection.sendNotification(method, params);\n            });\n        }\n        this.clientRequests = this.constructClientRequestHandler(Method.ClientRequest);\n        this.serverRequests = this.constructServerRequestHandler(Method.ServerRequest);\n        this.serverRequests['client/registerCapability'].setHandler(async (params) => {\n            params.registrations.forEach((capabilityRegistration) => {\n                try {\n                    const updatedCapabilities = registerServerCapability(this.serverCapabilities, capabilityRegistration);\n                    if (updatedCapabilities === null) {\n                        this.console.error(`Failed to register server capability: ${capabilityRegistration}`);\n                        return;\n                    }\n                    this.serverCapabilities = updatedCapabilities;\n                }\n                catch (err) {\n                    this.console.error(err);\n                }\n            });\n        });\n        this.serverRequests['client/unregisterCapability'].setHandler(async (params) => {\n            params.unregisterations.forEach((capabilityUnregistration) => {\n                this.serverCapabilities = unregisterServerCapability(this.serverCapabilities, capabilityUnregistration);\n            });\n        });\n        this.serverRequests['workspace/configuration'].setHandler(async (params) => {\n            return params.items.map(item => {\n                // LSP: \"If the client can’t provide a configuration setting for a given scope\n                // then `null` needs to be present in the returned array.\"\n                // for now we do not support configuration, but yaml server does not respect\n                // client capability so we have a handler just for that\n                return null;\n            });\n        });\n    }\n    sendSelectiveChange(changeEvent, documentInfo) {\n        this._sendChange([changeEvent], documentInfo);\n    }\n    sendFullTextChange(text, documentInfo) {\n        this._sendChange([{ text }], documentInfo);\n    }\n    /**\n     * @deprecated The method should not be used in new code. Use provides() instead.\n     */\n    isRenameSupported() {\n        return !!(this.serverCapabilities && this.serverCapabilities.renameProvider);\n    }\n    provides(provider) {\n        return !!(this.serverCapabilities && this.serverCapabilities[provider]);\n    }\n    /**\n     * @deprecated The method should not be used in new code\n     */\n    async rename(location, documentInfo, newName, emit = true) {\n        if (!this.isReady || !this.isRenameSupported()) {\n            return null;\n        }\n        const params = {\n            textDocument: {\n                uri: documentInfo.uri\n            },\n            position: {\n                line: location.line,\n                character: location.ch\n            },\n            newName\n        };\n        const edit = await this.connection.sendRequest('textDocument/rename', params);\n        if (emit) {\n            this.emit('renamed', edit);\n        }\n        return edit;\n    }\n    connect(socket) {\n        super.connect(socket);\n        until_ready(() => {\n            return this.isConnected;\n        }, -1)\n            .then(() => {\n            this.connection.onClose(() => {\n                this.isConnected = false;\n                this.emit('close', this.closing_manually);\n            });\n        })\n            .catch(() => {\n            console.error('Could not connect onClose signal');\n        });\n        return this;\n    }\n    close() {\n        try {\n            this.closing_manually = true;\n            super.close();\n        }\n        catch (e) {\n            this.closing_manually = false;\n        }\n    }\n    _sendChange(changeEvents, documentInfo) {\n        if (!this.isReady) {\n            return;\n        }\n        if (!this.openedUris.get(documentInfo.uri)) {\n            this.sendOpen(documentInfo);\n        }\n        const textDocumentChange = {\n            textDocument: {\n                uri: documentInfo.uri,\n                version: documentInfo.version\n            },\n            contentChanges: changeEvents\n        };\n        this.connection.sendNotification('textDocument/didChange', textDocumentChange);\n        documentInfo.version++;\n    }\n    async getCompletionResolve(completionItem) {\n        if (!this.isReady || !this.isCompletionResolveProvider()) {\n            return;\n        }\n        return this.connection.sendRequest('completionItem/resolve', completionItem);\n    }\n    /**\n     * Does support completionItem/resolve?\n     * @deprecated The method should not be used in new code\n     */\n    isCompletionResolveProvider() {\n        var _a, _b;\n        return (((_b = (_a = this.serverCapabilities) === null || _a === void 0 ? void 0 : _a.completionProvider) === null || _b === void 0 ? void 0 : _b.resolveProvider) || false);\n    }\n}\n//# sourceMappingURL=connection.js.map"],"sourceRoot":""}