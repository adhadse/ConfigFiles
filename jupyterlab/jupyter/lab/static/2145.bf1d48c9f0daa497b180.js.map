{"version":3,"sources":["webpack://@jupyterlab/application-top/./node_modules/@krassowski/jupyterlab-lsp/node_modules/@krassowski/completion-theme/style/index.css?4139","webpack://@jupyterlab/application-top/./node_modules/@krassowski/jupyterlab-lsp/node_modules/@krassowski/completion-theme/lib/about.js","webpack://@jupyterlab/application-top/./node_modules/@krassowski/jupyterlab-lsp/node_modules/@krassowski/completion-theme/lib/index.js","webpack://@jupyterlab/application-top/./node_modules/@krassowski/jupyterlab-lsp/node_modules/@krassowski/completion-theme/style/index.css"],"names":["options","insert","singleton","update","render_licence","licence","className","href","link","title","name","abbreviation","licensor","render_theme","trans","theme","get_set","is_current","icons","icon","push","react","id","__","key","dark","render_themes_list","props","themes","map","current","CompletionThemeManager","constructor","themeManager","this","current_theme_id","Map","icons_cache","icon_overrides","themeChanged","connect","update_icons_set","is_theme_light","isLight","get_iconset","_a","_b","icons_sets","dark_mode_and_dark_supported","set","light","current_theme","mode","completion_kind","svg","Object","entries","toLowerCase","has","get","LabIcon","svgstr","bindprops","current_icons","get_icon","type","substring","toUpperCase","kernelIcon","set_theme","document","body","classList","remove","current_theme_class","console","warn","add","register_theme","display_themes","showDialog","values","bind","buttons","Dialog","label","catch","set_icons_overrides","iconOverrides","keys","kernelType","LSP_CATEGORY","COMPLETION_THEME_MANAGER","requires","IThemeManager","ICommandPalette","ITranslator","activate","app","commandPalette","translator","load","manager","command_id","commands","addCommand","execute","addItem","category","command","provides","autoStart","___CSS_LOADER_EXPORT___","module"],"mappings":"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","file":"2145.bf1d48c9f0daa497b180.js?v=bf1d48c9f0daa497b180","sourcesContent":["import api from \"!../../../../../../style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../../css-loader/dist/cjs.js!./index.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\nimport { COMPLETER_THEME_PREFIX } from './types';\nfunction render_licence(licence) {\n    return (React.createElement(\"div\", { className: 'lsp-licence' },\n        React.createElement(\"a\", { href: licence.link, title: licence.name }, licence.abbreviation),\n        ' ',\n        licence.licensor));\n}\nfunction render_theme(trans, theme, get_set, is_current) {\n    let icons = [];\n    for (let [name, icon] of get_set(theme)) {\n        icons.push(React.createElement(\"div\", { className: 'lsp-completer-icon-row' },\n            React.createElement(\"div\", null, name),\n            React.createElement(\"div\", { className: 'jp-Completer-icon' },\n                React.createElement(icon.react, null))));\n    }\n    return (React.createElement(\"div\", { className: 'lsp-completer-themes ' + COMPLETER_THEME_PREFIX + theme.id },\n        React.createElement(\"h4\", null,\n            theme.name,\n            is_current ? trans.__(' (current)') : ''),\n        React.createElement(\"ul\", null,\n            React.createElement(\"li\", { key: 'id' },\n                \"ID: \",\n                React.createElement(\"code\", null, theme.id)),\n            React.createElement(\"li\", { key: 'licence' },\n                trans.__('Licence: '),\n                render_licence(theme.icons.licence)),\n            React.createElement(\"li\", { key: 'dark' }, typeof theme.icons.dark === 'undefined'\n                ? ''\n                : trans.__('Includes dedicated dark mode icons set'))),\n        React.createElement(\"div\", { className: 'lsp-completer-theme-icons' }, icons)));\n}\nexport function render_themes_list(trans, props) {\n    let themes = props.themes.map(theme => render_theme(trans, theme, props.get_set, theme == props.current));\n    return React.createElement(\"div\", null, themes);\n}\n//# sourceMappingURL=about.js.map","import '../style/index.css';\nimport { Dialog, ICommandPalette, IThemeManager, showDialog } from '@jupyterlab/apputils';\nimport { ITranslator } from '@jupyterlab/translation';\nimport { LabIcon, kernelIcon } from '@jupyterlab/ui-components';\nimport { render_themes_list } from './about';\nimport { COMPLETER_THEME_PREFIX, ILSPCompletionThemeManager, KernelKind, PLUGIN_ID } from './types';\nexport class CompletionThemeManager {\n    constructor(themeManager, trans) {\n        this.themeManager = themeManager;\n        this.current_theme_id = null;\n        this.themes = new Map();\n        this.icons_cache = new Map();\n        this.icon_overrides = new Map();\n        themeManager.themeChanged.connect(this.update_icons_set, this);\n        this.trans = trans;\n    }\n    is_theme_light() {\n        const current = this.themeManager.theme;\n        if (!current) {\n            // assume true by default\n            return true;\n        }\n        return this.themeManager.isLight(current);\n    }\n    get_iconset(theme) {\n        var _a, _b;\n        const icons_sets = theme.icons;\n        const dark_mode_and_dark_supported = !this.is_theme_light() && typeof icons_sets.dark !== 'undefined';\n        const set = dark_mode_and_dark_supported\n            ? icons_sets.dark\n            : icons_sets.light;\n        const icons = new Map();\n        let options = ((_b = (_a = this.current_theme) === null || _a === void 0 ? void 0 : _a.icons) === null || _b === void 0 ? void 0 : _b.options) || {};\n        const mode = this.is_theme_light() ? 'light' : 'dark';\n        for (let [completion_kind, svg] of Object.entries(set)) {\n            let name = 'lsp:' + theme.id + '-' + completion_kind.toLowerCase() + '-' + mode;\n            let icon;\n            if (this.icons_cache.has(name)) {\n                icon = this.icons_cache.get(name);\n            }\n            else {\n                icon = new LabIcon({\n                    name: name,\n                    svgstr: svg\n                });\n                this.icons_cache.set(name, icon);\n            }\n            icons.set(completion_kind, icon.bindprops(options));\n        }\n        return icons;\n    }\n    update_icons_set() {\n        if (this.current_theme === null) {\n            return;\n        }\n        this.current_icons = this.get_iconset(this.current_theme);\n    }\n    get_icon(type) {\n        if (this.current_theme === null) {\n            return null;\n        }\n        if (type) {\n            if (this.icon_overrides.has(type.toLowerCase())) {\n                type = this.icon_overrides.get(type.toLowerCase());\n            }\n            type =\n                type.substring(0, 1).toUpperCase() + type.substring(1).toLowerCase();\n        }\n        if (this.current_icons.has(type)) {\n            return this.current_icons.get(type);\n        }\n        if (type === KernelKind) {\n            return kernelIcon;\n        }\n        return null;\n    }\n    get current_theme_class() {\n        return COMPLETER_THEME_PREFIX + this.current_theme_id;\n    }\n    set_theme(id) {\n        if (this.current_theme_id) {\n            document.body.classList.remove(this.current_theme_class);\n        }\n        if (id && !this.themes.has(id)) {\n            console.warn(`[LSP][Completer] Icons theme ${id} cannot be set yet (it may be loaded later).`);\n        }\n        this.current_theme_id = id;\n        if (id !== null) {\n            document.body.classList.add(this.current_theme_class);\n        }\n        this.update_icons_set();\n    }\n    get current_theme() {\n        if (this.current_theme_id && this.themes.has(this.current_theme_id)) {\n            return this.themes.get(this.current_theme_id);\n        }\n        return null;\n    }\n    register_theme(theme) {\n        if (this.themes.has(theme.id)) {\n            console.warn('Theme with name', theme.id, 'was already registered, overwriting.');\n        }\n        this.themes.set(theme.id, theme);\n        this.update_icons_set();\n    }\n    /**\n     * Display the registered themes in a dialog,\n     * both for the user to know what they can choose from,\n     * and for the developer to quickly check how the icons\n     * from each theme would look rendered.\n     */\n    display_themes() {\n        showDialog({\n            title: this.trans.__('LSP Completer Themes'),\n            body: render_themes_list(this.trans, {\n                themes: [...this.themes.values()],\n                current: this.current_theme,\n                get_set: this.get_iconset.bind(this)\n            }),\n            buttons: [Dialog.okButton({ label: this.trans.__('OK') })]\n        }).catch(console.warn);\n    }\n    set_icons_overrides(iconOverrides) {\n        this.icon_overrides = new Map(Object.keys(iconOverrides).map(kernelType => [\n            kernelType.toLowerCase(),\n            iconOverrides[kernelType]\n        ]));\n    }\n}\nconst LSP_CATEGORY = 'Language server protocol';\nexport const COMPLETION_THEME_MANAGER = {\n    id: PLUGIN_ID,\n    requires: [IThemeManager, ICommandPalette, ITranslator],\n    activate: (app, themeManager, commandPalette, translator) => {\n        const trans = translator.load('jupyterlab_lsp');\n        let manager = new CompletionThemeManager(themeManager, trans);\n        const command_id = 'lsp:completer-about-themes';\n        app.commands.addCommand(command_id, {\n            label: trans.__('Display the completer themes'),\n            execute: () => {\n                manager.display_themes();\n            }\n        });\n        commandPalette.addItem({\n            category: LSP_CATEGORY,\n            command: command_id\n        });\n        return manager;\n    },\n    provides: ILSPCompletionThemeManager,\n    autoStart: true\n};\n//# sourceMappingURL=index.js.map","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../../css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../../css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".lsp-completer-themes .lsp-licence {\\n  display: inline;\\n}\\n\\n.lsp-completer-themes ul {\\n  list-style: none;\\n  padding-left: 10px;\\n}\\n\\n.lsp-completer-theme-icons {\\n  margin-left: 10px;\\n}\\n\\n.lsp-completer-icon-row {\\n  width: 50%;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n/* a workaround for scrollbars being always on in the completer documentation panel, see\\n https://github.com/jupyter-lsp/jupyterlab-lsp/pull/322#issuecomment-682724175\\n */\\n.lsp-completer .jp-Completer-docpanel {\\n  overflow: auto;\\n}\\n\\n.lsp-completer.jp-Completer {\\n  --lsp-completer-max-label-width: 300px;\\n  --lsp-completer-max-detail-width: 200px;\\n}\\n\\n.lsp-completer .jp-Completer-match {\\n  max-width: var(--lsp-completer-max-label-width);\\n  overflow-x: hidden;\\n  white-space: nowrap;\\n  display: block;\\n  text-overflow: ellipsis;\\n}\\n\\n.lsp-completer .jp-mod-active .jp-Completer-match {\\n  text-overflow: clip;\\n}\\n\\n.lsp-completer-placeholder:after {\\n  content: 'Loading...';\\n  color: #7f7f7f;\\n}\\n\\n/* a workaround for code being larger font size than text in markdown-rendered panel */\\n.lsp-completer .jp-Completer-docpanel pre code {\\n  font-size: 90%;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-item {\\n  --lsp-completer-label-height: 24px;\\n  --lsp-completer-detail-height: 20px;\\n  --lsp-completer-icon-width: 16px;\\n  height: var(--lsp-completer-label-height);\\n  display: grid;\\n  grid-template-areas:\\n    'icon label'\\n    'detail detail';\\n  grid-template-columns: min-content 1fr;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below']\\n  .jp-Completer-item.jp-mod-active {\\n  height: calc(\\n    var(--lsp-completer-detail-height) + var(--lsp-completer-label-height)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-icon {\\n  grid-area: icon;\\n  width: var(--lsp-completer-icon-width);\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-match {\\n  grid-area: label;\\n  overflow: hidden;\\n  height: var(--lsp-completer-label-height);\\n}\\n\\n.lsp-completer .jp-Completer-item .jp-Completer-typeExtended {\\n  max-width: var(--lsp-completer-max-detail-width);\\n  min-height: 50px;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\n.lsp-completer .jp-mod-active .jp-Completer-typeExtended {\\n  text-overflow: clip;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-typeExtended {\\n  grid-area: detail;\\n  text-align: left;\\n  padding-left: calc(var(--lsp-completer-icon-width) + 8px);\\n  height: var(--lsp-completer-detail-height);\\n  line-height: var(--lsp-completer-detail-height);\\n  display: none;\\n  position: relative;\\n  top: -2px;\\n  overflow: hidden;\\n  max-width: calc(\\n    var(--lsp-completer-max-label-width) + var(--lsp-completer-max-detail-width)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-match {\\n  overflow: hidden;\\n  max-width: calc(\\n    var(--lsp-completer-max-label-width) + var(--lsp-completer-max-detail-width)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below']\\n  .jp-Completer-item.jp-mod-active\\n  .jp-Completer-typeExtended {\\n  display: block;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@krassowski/jupyterlab-lsp/node_modules/@krassowski/completion-theme/style/index.css\"],\"names\":[],\"mappings\":\"AAAA;EACE,eAAe;AACjB;;AAEA;EACE,gBAAgB;EAChB,kBAAkB;AACpB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,UAAU;EACV,aAAa;EACb,8BAA8B;AAChC;;AAEA;;EAEE;AACF;EACE,cAAc;AAChB;;AAEA;EACE,sCAAsC;EACtC,uCAAuC;AACzC;;AAEA;EACE,+CAA+C;EAC/C,kBAAkB;EAClB,mBAAmB;EACnB,cAAc;EACd,uBAAuB;AACzB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,qBAAqB;EACrB,cAAc;AAChB;;AAEA,sFAAsF;AACtF;EACE,cAAc;AAChB;;AAEA;EACE,kCAAkC;EAClC,mCAAmC;EACnC,gCAAgC;EAChC,yCAAyC;EACzC,aAAa;EACb;;mBAEiB;EACjB,sCAAsC;AACxC;;AAEA;;EAEE;;GAEC;AACH;;AAEA;EACE,eAAe;EACf,sCAAsC;AACxC;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,yCAAyC;AAC3C;;AAEA;EACE,gDAAgD;EAChD,gBAAgB;EAChB,kBAAkB;EAClB,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,yDAAyD;EACzD,0CAA0C;EAC1C,+CAA+C;EAC/C,aAAa;EACb,kBAAkB;EAClB,SAAS;EACT,gBAAgB;EAChB;;GAEC;AACH;;AAEA;EACE,gBAAgB;EAChB;;GAEC;AACH;;AAEA;;;EAGE,cAAc;AAChB\",\"sourcesContent\":[\".lsp-completer-themes .lsp-licence {\\n  display: inline;\\n}\\n\\n.lsp-completer-themes ul {\\n  list-style: none;\\n  padding-left: 10px;\\n}\\n\\n.lsp-completer-theme-icons {\\n  margin-left: 10px;\\n}\\n\\n.lsp-completer-icon-row {\\n  width: 50%;\\n  display: flex;\\n  justify-content: space-between;\\n}\\n\\n/* a workaround for scrollbars being always on in the completer documentation panel, see\\n https://github.com/jupyter-lsp/jupyterlab-lsp/pull/322#issuecomment-682724175\\n */\\n.lsp-completer .jp-Completer-docpanel {\\n  overflow: auto;\\n}\\n\\n.lsp-completer.jp-Completer {\\n  --lsp-completer-max-label-width: 300px;\\n  --lsp-completer-max-detail-width: 200px;\\n}\\n\\n.lsp-completer .jp-Completer-match {\\n  max-width: var(--lsp-completer-max-label-width);\\n  overflow-x: hidden;\\n  white-space: nowrap;\\n  display: block;\\n  text-overflow: ellipsis;\\n}\\n\\n.lsp-completer .jp-mod-active .jp-Completer-match {\\n  text-overflow: clip;\\n}\\n\\n.lsp-completer-placeholder:after {\\n  content: 'Loading...';\\n  color: #7f7f7f;\\n}\\n\\n/* a workaround for code being larger font size than text in markdown-rendered panel */\\n.lsp-completer .jp-Completer-docpanel pre code {\\n  font-size: 90%;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-item {\\n  --lsp-completer-label-height: 24px;\\n  --lsp-completer-detail-height: 20px;\\n  --lsp-completer-icon-width: 16px;\\n  height: var(--lsp-completer-label-height);\\n  display: grid;\\n  grid-template-areas:\\n    'icon label'\\n    'detail detail';\\n  grid-template-columns: min-content 1fr;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below']\\n  .jp-Completer-item.jp-mod-active {\\n  height: calc(\\n    var(--lsp-completer-detail-height) + var(--lsp-completer-label-height)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-icon {\\n  grid-area: icon;\\n  width: var(--lsp-completer-icon-width);\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-match {\\n  grid-area: label;\\n  overflow: hidden;\\n  height: var(--lsp-completer-label-height);\\n}\\n\\n.lsp-completer .jp-Completer-item .jp-Completer-typeExtended {\\n  max-width: var(--lsp-completer-max-detail-width);\\n  min-height: 50px;\\n  overflow-x: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\n.lsp-completer .jp-mod-active .jp-Completer-typeExtended {\\n  text-overflow: clip;\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-typeExtended {\\n  grid-area: detail;\\n  text-align: left;\\n  padding-left: calc(var(--lsp-completer-icon-width) + 8px);\\n  height: var(--lsp-completer-detail-height);\\n  line-height: var(--lsp-completer-detail-height);\\n  display: none;\\n  position: relative;\\n  top: -2px;\\n  overflow: hidden;\\n  max-width: calc(\\n    var(--lsp-completer-max-label-width) + var(--lsp-completer-max-detail-width)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below'] .jp-Completer-match {\\n  overflow: hidden;\\n  max-width: calc(\\n    var(--lsp-completer-max-label-width) + var(--lsp-completer-max-detail-width)\\n  );\\n}\\n\\nbody[data-lsp-completer-layout='detail-below']\\n  .jp-Completer-item.jp-mod-active\\n  .jp-Completer-typeExtended {\\n  display: block;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"sourceRoot":""}