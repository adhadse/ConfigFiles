import { JumpHistory } from '../history';
import { _ensureFocus } from '../notebook_private';
import { CodeJumper, jumpers } from './jumper';
export class NotebookJumper extends CodeJumper {
    constructor(notebook_widget, document_manager) {
        super();
        this.widget = notebook_widget;
        this.notebook = notebook_widget.content;
        this.history = new JumpHistory(this.notebook.model.modelDB);
        this.document_manager = document_manager;
    }
    get editors() {
        return this.notebook.widgets.map(cell => cell.editor);
    }
    jump(position) {
        let { token, index } = position;
        // Prevents event propagation issues
        setTimeout(() => {
            this.notebook.deselectAll();
            this.notebook.activeCellIndex = index;
            _ensureFocus(this.notebook);
            this.notebook.mode = 'edit';
            // find out offset for the element
            let activeEditor = this.notebook.activeCell.editor;
            // place cursor in the line with the definition
            let position = activeEditor.getPositionAt(token.offset);
            activeEditor.setSelection({ start: position, end: position });
        }, 0);
    }
    getOffset(position, cell = 0) {
        return this.editors[cell].getOffsetAt(position);
    }
    getCurrentPosition() {
        let position = this.editors[this.notebook.activeCellIndex].getCursorPosition();
        return {
            editor_index: this.notebook.activeCellIndex,
            line: position.line,
            column: position.column,
            contents_path: this.widget.context.path,
            is_symlink: false
        };
    }
    getJumpPosition(position, input_number) {
        return {
            token: {
                offset: this.getOffset(position, input_number),
                value: ''
            },
            index: input_number
        };
    }
}
jumpers.set('notebook', NotebookJumper);
//# sourceMappingURL=notebook.js.map