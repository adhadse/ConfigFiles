/** The Public API, as exposed in the `main` field of package.json */
/** General public tokens, including lumino Tokens and namespaces */
export * from './tokens';
/** Component- and feature-specific APIs */
export * from './api';
import { JupyterFrontEnd, JupyterFrontEndPlugin } from '@jupyterlab/application';
import { ICommandPalette } from '@jupyterlab/apputils';
import { IDocumentManager } from '@jupyterlab/docmanager';
import { IDocumentWidget } from '@jupyterlab/docregistry';
import { ILoggerRegistry } from '@jupyterlab/logconsole';
import { ISettingRegistry } from '@jupyterlab/settingregistry';
import { IStatusBar } from '@jupyterlab/statusbar';
import { ITranslator } from '@jupyterlab/translation';
import '../style/index.css';
import { ContextCommandManager } from './command_manager';
import { DocumentConnectionManager } from './connection_manager';
import { IForeignCodeExtractorsRegistry } from './extractors/types';
import { IFeature } from './feature';
import { LanguageServerManager } from './manager';
import { ICodeOverridesRegistry, ILSPCodeOverridesManager } from './overrides/tokens';
import { IAdapterTypeOptions, ILSPAdapterManager, ILSPCodeExtractorsManager, ILSPFeatureManager, ILSPLogConsole, ILSPVirtualEditorManager } from './tokens';
import IPaths = JupyterFrontEnd.IPaths;
export interface IFeatureOptions {
    /**
     * The feature to be registered.
     */
    feature: IFeature;
    /**
     * Identifiers (values of `JupyterFrontEndPlugin.id` field) of the features
     * that your feature wants to disable; use it to override the default feature
     * implementations with your custom implementation (e.g. a custom completer)
     */
    supersedes?: string[];
}
export declare class FeatureManager implements ILSPFeatureManager {
    features: Array<IFeature>;
    private command_managers;
    private command_manager_registered;
    constructor();
    private _register;
    register(options: IFeatureOptions): void;
    registerCommandManager(manager: ContextCommandManager): void;
}
export interface ILSPExtension {
    app: JupyterFrontEnd;
    connection_manager: DocumentConnectionManager;
    language_server_manager: LanguageServerManager;
    feature_manager: ILSPFeatureManager;
    editor_type_manager: ILSPVirtualEditorManager;
    foreign_code_extractors: IForeignCodeExtractorsRegistry;
    code_overrides: ICodeOverridesRegistry;
    console: ILSPLogConsole;
    translator: ITranslator;
    user_console: ILoggerRegistry | null;
}
export declare class LSPExtension implements ILSPExtension {
    app: JupyterFrontEnd;
    private setting_registry;
    private palette;
    editor_type_manager: ILSPVirtualEditorManager;
    private code_extractors_manager;
    private code_overrides_manager;
    console: ILSPLogConsole;
    translator: ITranslator;
    user_console: ILoggerRegistry | null;
    connection_manager: DocumentConnectionManager;
    language_server_manager: LanguageServerManager;
    feature_manager: ILSPFeatureManager;
    constructor(app: JupyterFrontEnd, setting_registry: ISettingRegistry, palette: ICommandPalette, documentManager: IDocumentManager, paths: IPaths, adapterManager: ILSPAdapterManager, editor_type_manager: ILSPVirtualEditorManager, code_extractors_manager: ILSPCodeExtractorsManager, code_overrides_manager: ILSPCodeOverridesManager, console: ILSPLogConsole, translator: ITranslator, user_console: ILoggerRegistry | null, status_bar: IStatusBar | null);
    registerAdapterType(adapterManager: ILSPAdapterManager, type: IAdapterTypeOptions<IDocumentWidget>): void;
    get foreign_code_extractors(): IForeignCodeExtractorsRegistry;
    get code_overrides(): ICodeOverridesRegistry;
    private updateOptions;
}
declare const plugins: JupyterFrontEndPlugin<any>[];
/**
 * Export the plugins as default.
 */
export default plugins;
